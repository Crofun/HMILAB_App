package com.example.Zan.nrfuart;

import android.graphics.Color;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;

/**
 * Created by nodgd on 2017/09/16.
 */

class SendCardData {

    private String title = null;
    private int id = 0;
    private int state = 0;
    private int count = 0;
    private int data[];
    private int channel;
    private int identifier = 0;
    private List<Integer> messageFlow = null;
    private SendRunner send;
    private Thread sendthread;


    public SendCardData() {
    }

    public SendCardData(SendCardData SCD) {
        super();
        data = SCD.getData().clone();
    }

    public void DataReview() {
        count = count + 1;
        if (count < data.length)
            add(data[count]);
    }

    public void start() {
        send = new SendRunner(data, channel, id);
        sendthread = new Thread(send);
        sendthread.start();
    }

    public void setData(int a[]) {
        data = a.clone();
    }

    public int[] getData() {
        return data;
    }

    public void setIdentifier(int Identifier) {
        identifier = Identifier;
    }

    public int getIdentifier() {
        return identifier;
    }


    public void setChannel(int Channel) {
        channel = Channel;
    }

    public int getChannel() {
        return channel;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getTitle() {
        if (title == null || title.equals("")) {
            return "Send Card Title";
        }
        return title;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getIdInString() {
        return "" + id;
    }

    public void setState(int state) {
        this.state = state;
    }

    public String getStateInString() {
        return "" + state;
    }

    public void setMessageFlow(int[] msg) {
        messageFlow = new ArrayList<>();
        for (int i = 0; i < msg.length; i++) {
            messageFlow.add(msg[i]);
        }
    }

    public void setMessageFlow(List<Integer> msg) {
        messageFlow = msg;
    }

    public void add(int msgItem) {
        messageFlow.add(msgItem);
    }

    public void add(int[] msg) {
        for (int msgItem : msg) {
            messageFlow.add(msgItem);
        }
    }

    public void add(List<Integer> msg) {
        for (Integer msgItem : msg) {
            messageFlow.add(msgItem);
        }
    }

    public LineChartData getLineChartData() {
        //流数据变成点序列
        List<PointValue> valueList = new ArrayList<>();
        if (messageFlow != null) {
            for (int i = 0; i < messageFlow.size(); i++) {
                valueList.add(new PointValue(i, messageFlow.get(i)));
            }
        }
        //点序列变成线
        Line line = new Line(valueList);
        line.setColor(Color.BLUE);
        line.setCubic(false);
        line.setFilled(false);
        line.setHasPoints(false);
        line.setStrokeWidth(1);
        //线变成线序列，但是线序列里面只有一条线
        List<Line> lineList = new ArrayList<>();
        lineList.add(line);

        //x轴
        Axis axisX = new Axis();
        axisX.setTextColor(Color.RED);
        axisX.setTextSize(10);
        axisX.setAutoGenerated(true);

        //y轴
        Axis axisY = new Axis();
        axisY.setTextColor(Color.RED);
        axisY.setTextSize(10);
        axisY.setAutoGenerated(true);

        //新建一个可以传入的数据，填入数据
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lineList);
        lineChartData.setAxisXBottom(axisX);
        lineChartData.setAxisYLeft(axisY);
        return lineChartData;
    }
}
