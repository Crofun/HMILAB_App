package com.example.Zan.nrfuart;

import android.graphics.Color;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;

/**
 * Created by nodgd on 2017/09/16.
 */

class MonitorCardData extends BaseCardData {

    private static final String TAG = "MonitorCardData";

    private int channel;
    private List<Integer> message;

    public MonitorCardData() {
        super();
        message = new ArrayList<>();
    }

    @Override
    public String getTitle() {
        if (title.equals("")) {
            return "No title" + " (MonitorCard)";
        } else {
            return title + " (MonitorCard)";
        }
    }

    //选择的通道
    public void setChannel(int channel) {
        this.channel = channel;
    }

    public int getChannel() {
        return channel;
    }

    //显示出来的数据数组
    public void setMessage(int[] message) {
        this.message = new ArrayList<>();
        for (int i = 0; i < message.length; i++) {
            this.message.add(message[i]);
        }
    }

    public void setMessage(List<Integer> message) {
        this.message = message == null ? new ArrayList<Integer>() : message;
    }

    public void addMessage(int moreMessage) {
        message.add(moreMessage);
    }

    public void addMessage(int[] moreMessage) {
        for (int moreMessageItem : moreMessage) {
            message.add(moreMessageItem);
        }
    }

    public void addMessage(List<Integer> moreMessage) {
        for (Integer moreMessageItem : moreMessage) {
            message.add(moreMessageItem);
        }
    }

    public void clearMessage() {
        message.clear();
    }

    public List<Integer> getMessage() {
        return message;
    }

    //把数据数组变成LineChartData类型
    public LineChartData getLineChartData() {
        //流数据变成点序列
        List<PointValue> valueList = new ArrayList<>();
        if (message != null) {
            for (int i = 0; i < message.size(); i++) {
                valueList.add(new PointValue(i, message.get(i)));
            }
        }
        //点序列变成线
        Line line = new Line(valueList);
        line.setColor(Color.BLUE);
        line.setCubic(false);
        line.setFilled(false);
        line.setHasPoints(false);
        line.setStrokeWidth(1);
        //线变成线序列，但是线序列里面只有一条线
        List<Line> lineList = new ArrayList<>();
        lineList.add(line);

        //x轴
        Axis axisX = new Axis();
        axisX.setTextColor(Color.RED);
        axisX.setTextSize(10);
        axisX.setAutoGenerated(true);

        //y轴
        Axis axisY = new Axis();
        axisY.setTextColor(Color.RED);
        axisY.setTextSize(10);
        axisY.setAutoGenerated(true);

        //新建一个可以传入的数据，填入数据
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lineList);
        lineChartData.setAxisXBottom(axisX);
        lineChartData.setAxisYLeft(axisY);
        return lineChartData;
    }
}
